{
  "_args": [
    [
      {
        "raw": "gulp-sourcemaps@^3.0.0",
        "scope": null,
        "escapedName": "gulp-sourcemaps",
        "name": "gulp-sourcemaps",
        "rawSpec": "^3.0.0",
        "spec": ">=3.0.0 <4.0.0",
        "type": "range"
      },
      "/Users/alexandr/inna/toDoList"
    ]
  ],
  "_from": "gulp-sourcemaps@^3.0.0",
  "_hasShrinkwrap": false,
  "_id": "gulp-sourcemaps@3.0.0",
  "_location": "/gulp-sourcemaps",
  "_nodeVersion": "14.1.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/gulp-sourcemaps_3.0.0_1605105799644_0.258924292782275"
  },
  "_npmUser": {
    "name": "nmccready",
    "email": "nemtcan@gmail.com"
  },
  "_npmVersion": "6.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "gulp-sourcemaps@^3.0.0",
    "scope": null,
    "escapedName": "gulp-sourcemaps",
    "name": "gulp-sourcemaps",
    "rawSpec": "^3.0.0",
    "spec": ">=3.0.0 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/gulp-sourcemaps/-/gulp-sourcemaps-3.0.0.tgz",
  "_shasum": "2e154e1a2efed033c0e48013969e6f30337b2743",
  "_shrinkwrap": null,
  "_spec": "gulp-sourcemaps@^3.0.0",
  "_where": "/Users/alexandr/inna/toDoList",
  "author": {
    "name": "Florian Reiterer",
    "email": "me@florianreiterer.com"
  },
  "bugs": {
    "url": "https://github.com/gulp-sourcemaps/gulp-sourcemaps/issues"
  },
  "dependencies": {
    "@gulp-sourcemaps/identity-map": "^2.0.1",
    "@gulp-sourcemaps/map-sources": "^1.0.0",
    "acorn": "^6.4.1",
    "convert-source-map": "^1.0.0",
    "css": "^3.0.0",
    "debug-fabulous": "^1.0.0",
    "detect-newline": "^2.0.0",
    "graceful-fs": "^4.0.0",
    "source-map": "^0.6.0",
    "strip-bom-string": "^1.0.0",
    "through2": "^2.0.0"
  },
  "description": "Sourcemap support for gulpjs.",
  "devDependencies": {
    "bootstrap": "^3.4.1",
    "eslint": "^5.16.0",
    "eslint-config-gulp": "^3.0.1",
    "expect": "^1.20.2",
    "gulp": "^4.0.0",
    "gulp-concat": "^2.6.1",
    "gulp-if": "^2.0.2",
    "gulp-less": "^3.0.0",
    "gulp-load-plugins": "^1.5.0",
    "hook-std": "0.2.X",
    "istanbul": "^0.4.3",
    "istanbul-coveralls": "^1.0.3",
    "mississippi": "1.X",
    "mocha": "^3.5.3",
    "object-assign": "^4.1.1",
    "rimraf": "^2.6.3",
    "vinyl": "^2.2.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-RqvUckJkuYqy4VaIH60RMal4ZtG0IbQ6PXMNkNsshEGJ9cldUPRb/YCgboYae+CLAs1HQNb4ADTKCx65HInquQ==",
    "shasum": "2e154e1a2efed033c0e48013969e6f30337b2743",
    "tarball": "https://registry.npmjs.org/gulp-sourcemaps/-/gulp-sourcemaps-3.0.0.tgz",
    "fileCount": 10,
    "unpackedSize": 35948,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJh2s3kCRA9TVsSAnZWagAAbHQP/jTx6Ozwpvz1XWO5tiXR\njlOTnUwFUonfTjIV4hNZ70XXNvJbM3AQ25BSodnQKZ+UjFcA/Ytgqz8Ob7Nd\nYQk6bSsEweK83ryhdjbxLBj4wvEIHRCrYBbXRIq26VUh02IGa/G3aW01wcoN\n5oQBUXLFoEcZ44XFh6+NTVAH35QtvUohG1Hl2B21/QBrLFeQk0EVGp8GKRRr\nRHRK5odhcjEPV4M+2+I5SNrnJ4OmnyC37pUfSL131GLqxowJnvlsnh6aRkhr\nM2KjdC6QdogPXduGYWcIRuVFePSYQKlGxlm3Ulfnx9At0MKp/zi6NlyFIHJY\nfFvtwWRuiHw2tFBrBDFlCQ2i54CuY8+ot39Pf6rWJYcO9/CybyJtytpCaF0y\nn9gq+bPYLiAzCtqvWwn+jFIgvsAoIY0CtFB7qQyNGbayAJRlAHcNzjbdVY24\nEXbWVgbhvY6CDwazvxvvukoFMsYfYvOoAqciZa5g8tnehRrIOqfhIGMBMN99\nY77vC3Pyu85yaNVG+aOJ8DCrCnV5dJhxVNcqSL2ne47ijEXN/kp75oXsob0c\nI2kCg4QsRs9RLOlSlDXfNbVqVAobmtDcN7X/nEokV9g7TwNVVJmQtP1UAs0e\nYJ5Kwb8qqF9+aTh456ExKR1R8gePhM2nQJ2GP19PCCiwL0M/QtUi8YMmvhvh\nmDH7\r\n=a7It\r\n-----END PGP SIGNATURE-----\r\n",
    "signatures": [
      {
        "keyid": "SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA",
        "sig": "MEYCIQC/Vw7Di1QY6nN6dzduwfXVVaQfqC/f9t1tF/wuvDJeXQIhAKDimD4CS3+yxlOFXEbnSmBEJuHvB4PaRFrMVnTfWHGC"
      }
    ]
  },
  "engines": {
    "node": ">= 6"
  },
  "files": [
    "index.js",
    "src"
  ],
  "gitHead": "2bcfcbb11085d1d6ef54239abd156bf7a7e72cfe",
  "homepage": "http://github.com/gulp-sourcemaps/gulp-sourcemaps",
  "keywords": [
    "gulpplugin",
    "gulp",
    "source maps",
    "sourcemaps"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "phated",
      "email": "blaine.bublitz@gmail.com"
    },
    {
      "name": "floridoo",
      "email": "florian.reiterer@gmail.com"
    },
    {
      "name": "nmccready",
      "email": "nemtcan@gmail.com"
    }
  ],
  "name": "gulp-sourcemaps",
  "optionalDependencies": {},
  "readme": "# gulp-sourcemaps\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url] [![Travis Build Status][travis-image]][travis-url] [![AppVeyor Build Status][appveyor-image]][appveyor-url] [![Coveralls Status][coveralls-image]][coveralls-url]\n\nSourcemap support for gulpjs.\n\n### Usage\n\nAll the examples here works with Gulp 4. To see examples related to Gulp 3, [you can read them here](https://github.com/gulp-sourcemaps/gulp-sourcemaps/blob/v2.6.5/README.md).\n\n#### Write inline source maps\nInline source maps are embedded in the source file.\n\nExample:\n```javascript\nvar gulp = require('gulp');\nvar plugin1 = require('gulp-plugin1');\nvar plugin2 = require('gulp-plugin2');\nvar sourcemaps = require('gulp-sourcemaps');\n\nfunction javascript() {\n  gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init())\n      .pipe(plugin1())\n      .pipe(plugin2())\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('dist'));\n};\n\n\nexports.javascript = javascript;\n```\n\nAll plugins between `sourcemaps.init()` and `sourcemaps.write()` need to have support for `gulp-sourcemaps`. You can find a list of such plugins in the [wiki](https://github.com/gulp-sourcemaps/gulp-sourcemaps/wiki/Plugins-with-gulp-sourcemaps-support).\n\n\n#### Write external source map files\n\nTo write external source map files, pass a path relative to the destination to `sourcemaps.write()`.\n\nExample:\n```javascript\nvar gulp = require('gulp');\nvar plugin1 = require('gulp-plugin1');\nvar plugin2 = require('gulp-plugin2');\nvar sourcemaps = require('gulp-sourcemaps');\n\nfunction javascript() {\n  gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init())\n      .pipe(plugin1())\n      .pipe(plugin2())\n    .pipe(sourcemaps.write('../maps'))\n    .pipe(gulp.dest('dist'));\n};\n\nexports.javascript = javascript;\n```\n\n#### Load existing source maps\n\nTo load existing source maps, pass the option `loadMaps: true` to `sourcemaps.init()`.\n\nExample:\n```javascript\nvar gulp = require('gulp');\nvar plugin1 = require('gulp-plugin1');\nvar plugin2 = require('gulp-plugin2');\nvar sourcemaps = require('gulp-sourcemaps');\n\nfunction javascript() {\n  gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init({loadMaps: true}))\n      .pipe(plugin1())\n      .pipe(plugin2())\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('dist'));\n};\n\nexports.javascript = javascript;\n```\n\n#### Handle large files\n\nTo handle large files, pass the option `largeFile: true` to `sourcemaps.init()`.\n\nExample:\n```javascript\nvar gulp = require('gulp');\nvar plugin1 = require('gulp-plugin1');\nvar plugin2 = require('gulp-plugin2');\nvar sourcemaps = require('gulp-sourcemaps');\n\nfunction javascript() {\n  gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init({largeFile: true}))\n      .pipe(plugin1())\n      .pipe(plugin2())\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('dist'));\n};\n\nexports.javascript = javascript;\n```\n\n#### Handle source files from different directories\n\nUse the `base` option on `gulp.src` to make sure all files are relative to a common base directory.\n\nExample:\n```javascript\nvar gulp = require('gulp');\nvar plugin1 = require('gulp-plugin1');\nvar plugin2 = require('gulp-plugin2');\nvar sourcemaps = require('gulp-sourcemaps');\n\nfunction javascript() {\ngulp.src(['src/test.js', 'src/testdir/test2.js'], { base: 'src' })\n    .pipe(sourcemaps.init())\n      .pipe(plugin1())\n      .pipe(plugin2())\n    .pipe(sourcemaps.write('../maps'))\n    .pipe(gulp.dest('dist'));\n};\n\nexports.javascript = javascript;\n```\n\n#### Alter `sources` property on sourcemaps\n\nThe exported `mapSources` method gives full control over the source paths. It takes a function that is called for every source and receives the default source path as a parameter and the original vinyl file.\n\nExample:\n```javascript\nfunction javascript() {\n  var stream = gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init())\n      .pipe(plugin1())\n      .pipe(plugin2())\n      // be careful with the sources returned otherwise contents might not be loaded properly\n      .pipe(sourcemaps.mapSources(function(sourcePath, file) {\n        // source paths are prefixed with '../src/'\n        return '../src/' + sourcePath;\n      }))\n    .pipe(sourcemaps.write('../maps')\n    .pipe(gulp.dest('public/scripts'));\n};\n\nexports.javascript = javascript;\n```\n\n#### Generate Identity Sourcemap\n\nThe exported `identityMap` method allows you to generate a full valid source map encoding no changes (slower, only for Javascript and CSS) instead of the default empty source map (no mappings, fast). __Use this option if you get missing or incorrect mappings, e.g. when debugging.__\n\nExample:\n```javascript\nfunction javascript() {\n  var stream = gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init())\n      // An identity sourcemap will be generated at this step\n      .pipe(sourcemaps.identityMap())\n      .pipe(plugin1())\n      .pipe(plugin2())\n    .pipe(sourcemaps.write('../maps')\n    .pipe(gulp.dest('public/scripts'));\n};\n\nexports.javascript = javascript;\n```\n\n\n### Init Options\n\n- `loadMaps`\n\n  Set to true to load existing maps for source files. Supports the following:\n    - inline source maps\n    - source map files referenced by a `sourceMappingURL=` comment\n    - source map files with the same name (plus .map) in the same directory\n\n\n- `identityMap`\n\n  __This option is deprecated. Upgrade to use our [`sourcemap.identityMap`](#generate-identity-sourcemap) API.__\n\n\n### Write Options\n\n- `addComment`\n\n  By default a comment containing / referencing the source map is added. Set this to `false` to disable the comment (e.g. if you want to load the source maps by header).\n\n  Example:\n  ```javascript\n  function javascript() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(plugin1())\n        .pipe(plugin2())\n      .pipe(sourcemaps.write('../maps', {addComment: false}))\n      .pipe(gulp.dest('dist'));\n  };\n\n  exports.javascript = javascript;\n  ```\n\n- `includeContent`\n\n  By default the source maps include the source code. Pass `false` to use the original files.\n\n  Including the content is the recommended way, because it \"just works\". When setting this to `false` you have to host the source files and set the correct `sourceRoot`.\n\n- `sourceRoot`\n\n  Set the location where the source files are hosted (use this when `includeContent` is set to `false`). This is usually a URL (or an absolute URL path), not a local file system path.\n  By default the source root is '' or in case `destPath` is set, the relative path from the source map to the source base directory (this should work for many dev environments).\n  If a relative path is used (empty string or one starting with a `.`), it is interpreted as a path relative to the destination. The plugin rewrites it to a path relative to each source map.\n\n  Example:\n  ```javascript\n  function javascript() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(plugin1())\n        .pipe(plugin2())\n      .pipe(sourcemaps.write({includeContent: false, sourceRoot: '/src'}))\n      .pipe(gulp.dest('dist'));\n  };\n\n  exports.javascript = javascript;\n  ```\n\n  Example (using a function):\n  ```javascript\n  function javascript() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(plugin1())\n        .pipe(plugin2())\n      .pipe(sourcemaps.write({\n        includeContent: false,\n        sourceRoot: function(file) {\n          return '/src';\n        }\n       }))\n      .pipe(gulp.dest('dist'));\n  };\n\n  exports.javascript = javascript;\n  ```\n\n  Example (relative path):\n  ```javascript\n  function javascript() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(plugin1())\n        .pipe(plugin2())\n      .pipe(sourcemaps.write('.', {includeContent: false, sourceRoot: '../src'}))\n      .pipe(gulp.dest('dist'));\n  };\n\n  exports.javascript = javascript;\n  ```\n  In this case for a file written to `dist/subdir/example.js`, the source map is written to `dist/subdir/example.js.map` and the sourceRoot will be `../../src` (resulting in the full source path `../../src/subdir/example.js`).\n\n- `destPath`\n\n  Set the destination path (the same you pass to `gulp.dest()`). If the source map destination path is not a sub path of the destination path, this is needed to get the correct path in the `file` property of the source map.\n  In addition, it allows to automatically set a relative `sourceRoot` if none is set explicitly.\n\n- `sourceMappingURLPrefix`\n\n  Specify a prefix to be prepended onto the source map URL when writing external source maps. Relative paths will have their leading dots stripped.\n\n  Example:\n  ```javascript\n  function javascript() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(plugin1())\n        .pipe(plugin2())\n      .pipe(sourcemaps.write('../maps', {\n        sourceMappingURLPrefix: 'https://asset-host.example.com/assets'\n      }))\n      .pipe(gulp.dest('public/scripts'));\n  };\n\n  exports.javascript = javascript;\n  ```\n\n  This will result in a source mapping URL comment like `sourceMappingURL=https://asset-host.example.com/assets/maps/helloworld.js.map`.\n\n- `sourceMappingURL`\n\n  If you need full control over the source map URL you can pass a function to this option. The output of the function must be the full URL to the source map (in function of the output file).\n\n  Example:\n  ```javascript\n  function javascript() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(plugin1())\n        .pipe(plugin2())\n      .pipe(sourcemaps.write('../maps', {\n        sourceMappingURL: function(file) {\n          return 'https://asset-host.example.com/' + file.relative + '.map';\n        }\n      }))\n      .pipe(gulp.dest('public/scripts'));\n  };\n\n  exports.javascript = javascript;\n  ```\n\n  This will result in a source mapping URL comment like `sourceMappingURL=https://asset-host.example.com/helloworld.js.map`.\n\n- `mapFile`\n\n  This option allows to rename the map file. It takes a function that is called for every map and receives the default map path as a parameter.\n\n  Example:\n  ```javascript\n  function javascript() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(plugin1())\n        .pipe(plugin2())\n      .pipe(sourcemaps.write('../maps', {\n        mapFile: function(mapFilePath) {\n          // source map files are named *.map instead of *.js.map\n          return mapFilePath.replace('.js.map', '.map');\n        }\n      }))\n      .pipe(gulp.dest('public/scripts'));\n  };\n\n  exports.javascript = javascript;\n  ```\n\n- `mapSources`\n\n  __This option is deprecated. Upgrade to use our [`sourcemap.mapSources`](#alter-sources-property-on-sourcemaps) API.__\n\n- `charset`\n\n  Sets the charset for inline source maps. Default: `utf8`\n\n- `clone`\n\n  Clones the original file for creation of the map file. Could be important if file history is important. See [file.clone()](https://github.com/gulpjs/vinyl#filecloneoptions) for possible options. Default: `{deep:false, contents:false}`\n\n### Plugin developers only:\n\n- **How to add source map support to plugins**\n\n  - Generate a source map for the transformation the plugin is applying\n  - **Important**: Make sure the paths in the generated source map (`file` and `sources`) are relative to `file.base` (e.g. use `file.relative`).\n  - Apply this source map to the vinyl `file`. E.g. by using [vinyl-sourcemaps-apply](https://github.com/gulp-sourcemaps/vinyl-sourcemaps-apply).\n    This combines the source map of this plugin with the source maps coming from plugins further up the chain.\n  - Add your plugin to the [wiki page](https://github.com/gulp-sourcemaps/gulp-sourcemaps/wiki/Plugins-with-gulp-sourcemaps-support)\n\n  #### Example:\n\n  ```js\n  var through = require('through2');\n  var applySourceMap = require('vinyl-sourcemaps-apply');\n  var myTransform = require('myTransform');\n\n  module.exports = function(options) {\n\n    function transform(file, encoding, callback) {\n      // generate source maps if plugin source-map present\n      if (file.sourceMap) {\n        options.makeSourceMaps = true;\n      }\n\n      // do normal plugin logic\n      var result = myTransform(file.contents, options);\n      file.contents = new Buffer(result.code);\n\n      // apply source map to the chain\n      if (file.sourceMap) {\n        applySourceMap(file, result.map);\n      }\n\n      this.push(file);\n      callback();\n    }\n\n    return through.obj(transform);\n  };\n  ```\n\n  - **Verify sourcemaps are working**\n\n    See example below or refer to [test/write.js](./test/write.js)\n\n  #### Example:\n  ```js\n  var stream = plugin();\n  var init = sourcemaps.init();\n  var write = sourcemaps.write();\n\n  init.pipe(stream).pipe(write);\n\n  write.on('data', function (file) {\n    assert(...);\n    cb();\n  });\n\n  init.write(new gutil.File(...));\n  init.end();\n  ```\n\n### Debugging\n\nAll debugging output relies on [visionmedia/debug](https://github.com/visionmedia/debug). Follow the directions to set the\nenvironment variable `$DEBUG`.\n\nFor a few examples of debug you could use:\n\n```sh\n  DEBUG='gulp-sourcemaps:*' #everything\n  DEBUG='gulp-sourcemaps:init' #init/index.js\n  DEBUG='gulp-sourcemaps:init:*' #init/index.internals.js\n  DEBUG='gulp-sourcemaps:write:' #write/index.js\n  DEBUG='gulp-sourcemaps:write:*' #write/index.internals.js\n  DEBUG='gulp-sourcemaps:write:,gulp-sourcemaps:init:**' #write/index.internals.js and init/index.internals.js\n```\n\n[downloads-image]: http://img.shields.io/npm/dm/gulp-sourcemaps.svg\n[npm-url]: https://www.npmjs.com/package/gulp-sourcemaps\n[npm-image]: http://img.shields.io/npm/v/gulp-sourcemaps.svg\n\n[travis-url]: https://travis-ci.org/gulp-sourcemaps/gulp-sourcemaps\n[travis-image]: http://img.shields.io/travis/gulp-sourcemaps/gulp-sourcemaps.svg?label=travis-ci\n\n[appveyor-url]: https://ci.appveyor.com/project/phated/gulp-sourcemaps\n[appveyor-image]: https://img.shields.io/appveyor/ci/phated/gulp-sourcemaps.svg?label=appveyor\n\n[coveralls-url]: https://coveralls.io/r/gulp-sourcemaps/gulp-sourcemaps\n[coveralls-image]: http://img.shields.io/coveralls/gulp-sourcemaps/gulp-sourcemaps/master.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/gulp-sourcemaps/gulp-sourcemaps.git"
  },
  "scripts": {
    "cover": "istanbul cover _mocha --report lcovonly",
    "coveralls": "npm run cover && istanbul-coveralls",
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "mocha --async-only"
  },
  "version": "3.0.0"
}
